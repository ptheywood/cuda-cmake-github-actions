# Windows builds.
name: Windows

on:
  push:
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/Windows.yml"
  # pull_request:
  #   paths:
  #     - "**"
  #     - "!.github"
  #     - ".github/workflows/Windows.yml"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          # Windows2019 & VS 2019 supports 10.1+
          - os: windows-2019
            cuda: "11.3.0"
            visual_studio: "Visual Studio 16 2019"
          # - os: windows-2019
          #   cuda: "11.2.2"
          #   visual_studio: "Visual Studio 16 2019"
          # - os: windows-2019
          #   cuda: "11.1.1"
          #   visual_studio: "Visual Studio 16 2019"
          # - os: windows-2019
          #   cuda: "11.0.3"
          #   visual_studio: "Visual Studio 16 2019"
          # - os: windows-2019
          #   cuda: "10.2.89"
          #   visual_studio: "Visual Studio 16 2019"
          # - os: windows-2019
          #   cuda: "10.1.243"
          #   visual_studio: "Visual Studio 16 2019"


    env:
      build_dir: "build"
      config: "Release"

    steps:
    - uses: actions/checkout@v2

    - name: Install CUDA
      env: 
        cuda: ${{ matrix.cuda }}
        visual_studio: ${{ matrix.visual_studio }}
      shell: powershell
      run: .\scripts\actions\install_cuda_windows.ps1

    - name: nvcc check
      shell: powershell
      run: |
        nvcc -V
        ls $env:CUDA_PATH
        ls $env:CUDA_PATH\bin
        ls $env:CUDA_PATH\include

    - name: cmake version
      shell: bash
      run: cmake --version

    - name: Configure CMake
      id: configure
      shell: bash
      run: cmake . -B ${{ env.build_dir }} -G "${{ matrix.visual_studio }}" -A x64 

    - name: Configure Error Processing
      if: ${{ (failure() && steps.configure.outcome == 'failure') || success() }}
      working-directory: ${{ env.build_dir }}
      shell: bash
      run: |
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            echo "---- CMakeFiles/CMakeOutput.log"
            cat CMakeFiles/CMakeOutput.log
            echo "----"
          fi
          if [[ -f "CMakeFiles/CMakeError.log" ]]; then
            echo "---- CMakeFiles/CMakeError.log"
            cat CMakeFiles/CMakeError.log
            echo "----"
          fi

    - name: Build
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --config ${{ env.config }} --target ALL_BUILD --verbose
